{"version":3,"sources":["context/game.js","playing-field/PlayingField.js","stats/RemainingGuesses.js","stats/Winstreak.js","stats/Stats.js","sidebar/PlayerButtons.js","sidebar/PlayerInfoWrapper.js","sidebar/PlayerMessage.js","sidebar/UserGuess.js","sidebar/DifficultySwitches.js","sidebar/Sidebar.js","App.js","index.js"],"names":["GameContext","React","createContext","difficultiesLib","EASY","MEDIUM","HARD","EXPERT","JEDI","hintsLib","guessesLib","progressesLib","PLAYING","WON","LOST","playerMessagesLib","initState","difficulty","pastGuesses","winningNumber","Math","ceil","random","currentHints","maxGuesses","numHints","selectedSquare","currentProgress","playerMessage","currentWinstreak","LOAD_GAME","START_GAME","PLAYER_GUESSED","PLAYER_REQUESTED_HINT","SELECT_NEW_SQUARE","getPlayerMessage","guess","winner","diff","abs","getNewHints","level","res","generateHint","length","hint","includes","push","reducer","state","type","payload","winstreak","newState","localStorage","setItem","GameProvider","children","useReducer","providerValue","dispatch","Provider","value","Row","scalar","useContext","className","Array","fill","map","empty","idx","evenSquare","oddSquare","squareValue","won","lost","currentChoice","onClick","e","target","innerText","PlayingField","window","onload","getItem","onunload","RemainingGuesses","Winstreak","Stats","PlayerButtons","id","PlayerInfoWrapper","PlayerMessage","UserGuess","htmlFor","DifficultySwitch","toLowerCase","DifficultySwitches","Object","keys","Sidebar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e069d4c2.chunk.js","sourcesContent":["/* eslint-disable default-case */\nimport React, { useReducer } from 'react';\n\nexport const GameContext = React.createContext();\n\nconst difficultiesLib = {\n\tEASY: 'EASY',\n\tMEDIUM: 'MEDIUM',\n\tHARD: 'HARD',\n\tEXPERT: 'EXPERT',\n\tJEDI: 'JEDI',\n};\n\nconst hintsLib = {\n\tEASY: 5,\n\tMEDIUM: 10,\n\tHARD: 15,\n\tEXPERT: 20,\n\tJEDI: 0,\n};\n\nconst guessesLib = {\n\tEASY: 5,\n\tMEDIUM: 4,\n\tHARD: 3,\n\tEXPERT: 2,\n\tJEDI: 1,\n};\n\nconst progressesLib = {\n\tPLAYING: 'PLAYING',\n\tWON: 'WON',\n\tLOST: 'LOST',\n};\n\nconst playerMessagesLib = {\n\tYOU_WIN: 'You Win!',\n\tALREADY_GUESSED: 'You have already guessed that number.',\n\tYOU_LOSE: 'You Lose :(',\n\tBURNING_UP: \"You're burning up!\",\n\tLUKEWARM: \"You're lukewarm.\",\n\tBIT_CHILLY: \"You're a bit chilly.\",\n\tICE_COLD: \"You're ice cold!\",\n\tJEDI_HINT: 'Reach out with your feelings ...',\n\tCLEAR_MESSAGE: '',\n\tSTART_MESSAGE: 'Good luck!',\n\tNOT_ENOUGH_GUESSES_LEFT: 'Not enough guesses left to hint...go for it!',\n\tPLEASE_CHOOSE_A_SQUARE: 'Select a square and resubmit!',\n};\n\nconst initState = {\n\tdifficulty: 'EASY',\n\tpastGuesses: [],\n\twinningNumber: Math.ceil(Math.random() * 100),\n\tcurrentHints: [],\n\tmaxGuesses: 5,\n\tnumHints: 5,\n\tselectedSquare: 0,\n\tcurrentProgress: progressesLib.PLAYING,\n\tplayerMessage: playerMessagesLib.START_MESSAGE,\n\tcurrentWinstreak: 0,\n};\n\nconst LOAD_GAME = 'LOAD_GAME';\nconst START_GAME = 'START_GAME';\nconst PLAYER_GUESSED = 'PLAYER_GUESSED';\nconst PLAYER_REQUESTED_HINT = 'PLAYER_REQUESTED_HINT';\nconst SELECT_NEW_SQUARE = 'SELECT_NEW_SQUARE';\n\nconst getPlayerMessage = (guess, winner) => {\n\tif (guess === winner) return playerMessagesLib.YOU_WIN;\n\n\tconst diff = Math.abs(guess - winner);\n\n\tswitch (true) {\n\t\tcase diff < 10:\n\t\t\treturn playerMessagesLib.BURNING_UP;\n\t\tcase diff < 25:\n\t\t\treturn playerMessagesLib.LUKEWARM;\n\t\tcase diff < 50:\n\t\t\treturn playerMessagesLib.BIT_CHILLY;\n\t\tcase diff < 100:\n\t\t\treturn playerMessagesLib.ICE_COLD;\n\t}\n};\n\nconst getNewHints = (level, winner) => {\n\tlet res = [];\n\n\tconst generateHint = () => Math.ceil(Math.random() * 100);\n\n\twhile (res.length < level - 1) {\n\t\tlet hint = generateHint();\n\t\twhile (res.includes(hint)) hint = generateHint();\n\n\t\tres.push(hint);\n\t}\n\n\tres.push(winner);\n\n\treturn res;\n};\n\nconst reducer = (state, { type, payload }) => {\n\tswitch (type) {\n\t\tcase LOAD_GAME: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentWinstreak: +payload.winstreak || 0,\n\t\t\t};\n\t\t}\n\n\t\t// payload: { difficulty: /* the current difficulty constant */}\n\t\tcase START_GAME: {\n\t\t\treturn {\n\t\t\t\t...initState,\n\t\t\t\tdifficulty: payload.difficulty,\n\t\t\t\twinningNumber: Math.ceil(Math.random() * 100),\n\t\t\t\tmaxGuesses: guessesLib[payload.difficulty],\n\t\t\t\tnumHints: hintsLib[payload.difficulty],\n\t\t\t\tcurrentProgress: progressesLib.PLAYING,\n\t\t\t\tcurrentWinstreak: state.currentWinstreak,\n\t\t\t};\n\t\t}\n\n\t\tcase SELECT_NEW_SQUARE: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentHints: [],\n\t\t\t\tselectedSquare: payload.selectedSquare,\n\t\t\t};\n\t\t}\n\n\t\tcase PLAYER_GUESSED: {\n\t\t\t// if player has not selected a square before clicking submit guess btn\n\t\t\tif (!payload.selectedSquare)\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tcurrentHints: [],\n\t\t\t\t\tplayerMessage: playerMessagesLib.PLEASE_CHOOSE_A_SQUARE,\n\t\t\t\t};\n\n\t\t\t// if player has already made that guess\n\t\t\tif (state.pastGuesses.includes(payload.selectedSquare))\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tplayerMessage: playerMessagesLib.ALREADY_GUESSED,\n\t\t\t\t};\n\n\t\t\t// if player has won\n\t\t\tif (payload.selectedSquare === state.winningNumber) {\n\t\t\t\tconst newState = {\n\t\t\t\t\t...state,\n\t\t\t\t\tcurrentProgress: progressesLib.WON,\n\t\t\t\t\tplayerMessage: playerMessagesLib.YOU_WIN,\n\t\t\t\t\tcurrentWinstreak: state.currentWinstreak++,\n\t\t\t\t};\n\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\t// otherwise process\n\t\t\tconst newState = {\n\t\t\t\t...state,\n\t\t\t\tpastGuesses: [...state.pastGuesses, payload.selectedSquare],\n\t\t\t\tplayerMessage: getPlayerMessage(\n\t\t\t\t\tpayload.selectedSquare,\n\t\t\t\t\tstate.winningNumber\n\t\t\t\t),\n\t\t\t};\n\n\t\t\t// if lost\n\t\t\tif (newState.pastGuesses.length === newState.maxGuesses) {\n\t\t\t\tlocalStorage.setItem('winstreak', '0');\n\n\t\t\t\treturn {\n\t\t\t\t\t...newState,\n\t\t\t\t\tcurrentProgress: progressesLib.LOST,\n\t\t\t\t\tplayerMessage: playerMessagesLib.YOU_LOSE,\n\t\t\t\t\tcurrentWinstreak: 0,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// otherwise, keep playing\n\t\t\treturn newState;\n\t\t}\n\n\t\tcase PLAYER_REQUESTED_HINT: {\n\t\t\t// if player is jedi\n\t\t\tif (state.difficulty === difficultiesLib.JEDI) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tplayerMessage: playerMessagesLib.JEDI_HINT,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// if player has no hints left\n\t\t\tif (state.maxGuesses - state.pastGuesses.length === 1) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tplayerMessage: playerMessagesLib.NOT_ENOUGH_GUESSES_LEFT,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// otherwise, get new hints\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentHints: getNewHints(\n\t\t\t\t\thintsLib[state.difficulty],\n\t\t\t\t\tstate.winningNumber\n\t\t\t\t),\n\t\t\t\tplayerMessage: playerMessagesLib.CLEAR_MESSAGE,\n\t\t\t\tpastGuesses: [...state.pastGuesses, null],\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst GameProvider = ({ children }) => {\n\t// useReducer takes initState as an arg\n\t// rather than the redux convention of setting default state\n\t// as a rest parameter on the reducer function itself\n\tconst [state, dispatch] = useReducer(reducer, initState);\n\n\tconst providerValue = {\n\t\tstate,\n\t\tdispatch,\n\t\tdifficultiesLib,\n\t\tprogressesLib,\n\t\tLOAD_GAME,\n\t\tPLAYER_GUESSED,\n\t\tPLAYER_REQUESTED_HINT,\n\t\tSTART_GAME,\n\t\tSELECT_NEW_SQUARE,\n\t};\n\n\treturn (\n\t\t<GameContext.Provider value={providerValue}>\n\t\t\t{children}\n\t\t</GameContext.Provider>\n\t);\n};\n\nexport default GameProvider;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst Row = ({ scalar }) => {\n\tconst { state, dispatch, progressesLib, SELECT_NEW_SQUARE } = useContext(\n\t\tGameContext\n\t);\n\n\tconst pattern = () => {\n\t\treturn (scalar / 10) % 2 === 0\n\t\t\t? ['darkSquare', 'lightSquare']\n\t\t\t: ['lightSquare', 'darkSquare'];\n\t};\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t{new Array(10).fill(null).map((empty, idx) => {\n\t\t\t\tconst [evenSquare, oddSquare] = pattern();\n\n\t\t\t\tconst squareValue = idx + 1 + scalar;\n\n\t\t\t\tconst getClassName = () => {\n\t\t\t\t\tconst squareType = idx % 2 === 0 ? evenSquare : oddSquare;\n\n\t\t\t\t\tconst modifier = (() => {\n\t\t\t\t\t\tconst won =\n\t\t\t\t\t\t\tstate.currentProgress === progressesLib.WON &&\n\t\t\t\t\t\t\tsquareValue === state.winningNumber;\n\n\t\t\t\t\t\tconst lost =\n\t\t\t\t\t\t\tstate.currentProgress === progressesLib.LOST &&\n\t\t\t\t\t\t\tsquareValue === state.winningNumber;\n\n\t\t\t\t\t\tconst currentChoice =\n\t\t\t\t\t\t\tstate.selectedSquare === squareValue &&\n\t\t\t\t\t\t\tstate.currentProgress === progressesLib.PLAYING;\n\n\t\t\t\t\t\tconst hint = state.currentHints.includes(squareValue);\n\n\t\t\t\t\t\tswitch (true) {\n\t\t\t\t\t\t\tcase won:\n\t\t\t\t\t\t\t\treturn ' won';\n\t\t\t\t\t\t\tcase lost:\n\t\t\t\t\t\t\t\treturn ' lost';\n\t\t\t\t\t\t\tcase currentChoice:\n\t\t\t\t\t\t\t\treturn ' currentChoice';\n\t\t\t\t\t\t\tcase hint:\n\t\t\t\t\t\t\t\treturn ' hint';\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\n\t\t\t\t\treturn squareType + modifier;\n\t\t\t\t};\n\n\t\t\t\treturn (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tclassName={getClassName()}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\ttype: SELECT_NEW_SQUARE,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tselectedSquare: +e.target.innerText,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{squareValue}\n\t\t\t\t\t</span>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nconst PlayingField = () => {\n\tconst { state, dispatch, LOAD_GAME } = useContext(GameContext);\n\n\twindow.onload = () => {\n\t\tconst winstreak = +localStorage.getItem('winstreak');\n\n\t\tdispatch({\n\t\t\ttype: LOAD_GAME,\n\t\t\tpayload: {\n\t\t\t\twinstreak,\n\t\t\t},\n\t\t});\n\t};\n\n\twindow.onunload = () => {\n\t\tlocalStorage.setItem('winstreak', state.currentWinstreak);\n\t};\n\n\tconst scalars = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n\n\treturn (\n\t\t<div className='playing-field'>\n\t\t\t{scalars.map(scalar => (\n\t\t\t\t<Row key={scalar} scalar={scalar} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default PlayingField;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst RemainingGuesses = () => {\n\tconst { state } = useContext(GameContext);\n\n\treturn (\n\t\t<div className='remaining-guesses'>\n\t\t\tRemaining Guesses: {state.maxGuesses - state.pastGuesses.length}\n\t\t</div>\n\t);\n};\n\nexport default RemainingGuesses;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst Winstreak = () => {\n\tconst { state } = useContext(GameContext);\n\n\treturn (\n\t\t<div className='winstreak'>\n\t\t\tCurrent Win Streak: {state.currentWinstreak}\n\t\t</div>\n\t);\n};\n\nexport default Winstreak;\n","import React from 'react';\nimport { RemainingGuesses, Winstreak } from './';\n\nconst Stats = () => {\n\treturn (\n\t\t<div className='stats'>\n\t\t\t<RemainingGuesses />\n\t\t\t<Winstreak />\n\t\t</div>\n\t);\n};\n\nexport default Stats;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst PlayerButtons = () => {\n\tconst {\n\t\tstate,\n\t\tdispatch,\n\t\tSTART_GAME,\n\t\tPLAYER_GUESSED,\n\t\tPLAYER_REQUESTED_HINT,\n\t\tprogressesLib,\n\t} = useContext(GameContext);\n\n\tconst { selectedSquare } = state || {};\n\n\treturn (\n\t\t<div className='button-wrapper'>\n\t\t\t<input\n\t\t\t\ttype='button'\n\t\t\t\tid='submit-guess-btn'\n\t\t\t\tvalue='SUBMIT GUESS'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (state.currentProgress !== progressesLib.PLAYING) return;\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: PLAYER_GUESSED,\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\tselectedSquare,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='button'\n\t\t\t\tid='hint-btn'\n\t\t\t\tvalue='GET A HINT'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (state.currentProgress !== progressesLib.PLAYING) return;\n\t\t\t\t\tdispatch({ type: PLAYER_REQUESTED_HINT });\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='button'\n\t\t\t\tid='play-again-btn'\n\t\t\t\tvalue='PLAY AGAIN'\n\t\t\t\tonClick={() =>\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: START_GAME,\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\tdifficulty: state.difficulty,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default PlayerButtons;\n","import React from 'react';\nimport { UserGuess, PlayerMessage } from './';\n\nconst PlayerInfoWrapper = () => {\n\treturn (\n\t\t<div className='player-info-wrapper'>\n\t\t\t<UserGuess />\n\t\t\t<PlayerMessage />\n\t\t</div>\n\t);\n};\n\nexport default PlayerInfoWrapper;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst PlayerMessage = () => {\n\tconst { state } = useContext(GameContext);\n\n\treturn <div className='player-message'>{state.playerMessage}</div>;\n};\n\nexport default PlayerMessage;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst UserGuess = () => {\n\tconst { state } = useContext(GameContext);\n\n\treturn (\n\t\t<div className='guess-wrapper'>\n\t\t\t<label htmlFor='user-guess'>Your Guess:</label>\n\t\t\t<div className='user-guess'>\n\t\t\t\t{!state.selectedSquare ? '' : state.selectedSquare}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default UserGuess;\n","import React, { useContext } from 'react';\nimport { GameContext } from '../context/game';\n\nconst DifficultySwitch = ({ level }) => {\n\tconst { state, dispatch, START_GAME } = useContext(GameContext);\n\n\treturn (\n\t\t<div\n\t\t\tclassName='difficulty-switch-box'\n\t\t\tonClick={() =>\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: START_GAME,\n\t\t\t\t\tpayload: { difficulty: level },\n\t\t\t\t})\n\t\t\t}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\tstate.difficulty === level ? 'checkbox active' : 'checkbox'\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className='checkmark'></div>\n\t\t\t</div>\n\t\t\t<div className='level-identifier'>{level.toLowerCase()}</div>\n\t\t</div>\n\t);\n};\n\nconst DifficultySwitches = () => {\n\tconst { difficultiesLib } = useContext(GameContext);\n\n\tconst levels = Object.keys(difficultiesLib);\n\n\treturn levels.map(level => <DifficultySwitch key={level} level={level} />);\n};\n\nexport default DifficultySwitches;\n","import React from 'react';\nimport { PlayerInfoWrapper, PlayerButtons, DifficultySwitches } from './';\n\nconst Sidebar = () => {\n\treturn (\n\t\t<div className='sidebar'>\n\t\t\t<div className='sidebar-field-wrapper'>\n\t\t\t\t<PlayerInfoWrapper />\n\t\t\t\t<PlayerButtons />\n\t\t\t</div>\n\t\t\t<div className='difficulty-wrapper'>\n\t\t\t\t<DifficultySwitches />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Sidebar;\n","import './App.css';\nimport PlayingField from './playing-field/PlayingField';\nimport { Stats } from './stats';\nimport { Sidebar } from './sidebar';\nimport GameProvider from './context/game';\n\nfunction App() {\n\treturn (\n\t\t<GameProvider>\n\t\t\t<div className='App'>\n\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t<div className='main'>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\tTHE <span className='h1-emphasis'>GUESSING</span>{' '}\n\t\t\t\t\t\t\tGAME\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<PlayingField />\n\t\t\t\t\t\t<Stats />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Sidebar />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</GameProvider>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}